#n is number of men
#output is vector of 0/1's of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
women(1)
women(1)
women(1)
women(1)
women(1)
women(1)
women(24)
24
men(24)
sample_diff <- function(n){
#random sample of n women and n men, returns difference in promotion prop
m <- men(n)
f <- women(n)
diff <- mean(m) - mean(f)
return(diff)
}
men(10)
foo <- men(10)
foo
mean(foo)
mean(women(25))
mean(women(25))
mean(women(25))
mean(women(25))
sample_diff <- function(n){
#random sample of n women and n men, returns difference in promotion prop
m <- men(n)
f <- women(n)
diff <- mean(m) - mean(f)
return(diff)
}
sample_diff(24)
sample_diff(24)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(24)
sample_diff(24)
sample_diff(24)
sample_diff(24)
sample_diff(24)
simulateData <- function(n, m){
# n: sample size
# m: number of times to run the experiment, ie # of trials
results <- c()
for(i in 1:m){
results <- append(results, sample_diff(n))
}
return(results)
}
data <- simulateData(1, 1)
data
data1 <- simulateData(24, 10)
data1
mean(data1)
data1 <- simulateData(24, 10000)
mean(data1)
hist(data1, plot = T)
hist(data1)
favorable <- data1 >= .292
favorable <- (data1 >= .292)
5 > 2
c(1, 5) > 2
mean(favorable)
sum(favorable)
sum(favorable) / 10000
data2 <- simulateData(100, 10000)
mean(data2)
hist(data2)
sum(favorable2) / 10000
favorable2 <- (data2 >= .292)
sum(favorable2) / 10000
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
women <- function(n){
#n is number of women
#output is vector of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
men <- function(n){
#n is number of men
#output is vector of 0/1's of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
sample_diff <- function(n){
#random sample of n women and n men, returns difference in promotion prop
m <- men(n)
f <- women(n)
diff <- mean(m) - mean(f)
return(diff)
}
sample_diff(30)
simulateData <- function(n, m){
# n: sample size
# m: number of times to run the experiment, ie # of trials
results <- c()
for(i in 1:m){
results <- append(results, sample_diff(n))
}
return(results)
}
data <- simulateData(1, 1)
data
data1 <- simulateData(24, 10)
data1
mean(data1)
data1 <- simulateData(24, 10000)
mean(data1)
hist(data1)
favorable <- (data1 >= .292)
sum(favorable) / 10000
data2 <- simulateData(100, 10000)
mean(data2)
hist(data2)
favorable2 <- (data2 >= .292)
sum(favorable2) / 10000
mean(data1)
mean(data2)
hist(data1, breaks = 24)
hist(data2, breaks = 24)
dataLogical <- data >= .292
head(dataLogical)
pval <- sum(dataLogical) / length(dataLogical)
pval
dataLogical <- data1 >= .292
head(dataLogical)
pval <- sum(dataLogical) / length(dataLogical)
pval
114 + 118 - 78
36 + 78 + 40
51 + 114 + 47 + 118
1 - (1 - .255)^5
1 - .2^3
.8^3
10/24
18/24
20/24
52*51
choose(52,2)
library(tidyverse)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35))
probDist
probDist$vals
probDist$probs
probDist$vals*probDist$probs
sum(probDist$vals*probDist$probs)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probs = (1/52)*c(12,4,1,35))
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probDist
sum(probDist$prod)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs) %>%
summarize( expVal = sum(prod))
probDist
expVal <- sum(probDist)
expVal
probDist <- probDist %>%
mutate( sqDevFromMean = (vals - expVal)^2)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probDist <- probDist %>%
mutate( sqDevFromMean = (vals - expVal)^2)
probDist
probDist <- probDist %>%
mutate( sqDevFromMeanWeighted = prob*(vals - expVal)^2)
probDist <- probDist %>%
mutate( sqDevFromMeanWeighted = probs*(vals - expVal)^2)
probDist
variance <- sum(probDist$sqDevFromMeanWeighted)
variance
stdDev <- sqrt(variance)
stdDev
expVal <- sum(vals*probs)
vals <- c(1, -1)
probs <- c(18/38, 20/38)
expVal <- sum(vals*probs)
expVal
18/38
var <- sum( probs*(vals - expVal)^2)
var
stdDev <- var^.5
stdDev
expVal
(expVal + 36/38)*(38/2)
expVal <- sum(vals*probs)
expVal
vals <- c(-1, 17)
probs <- c(36/38, 2/38)
expVal <- sum(vals*probs)
expVal
var <- sum( probs*(vals - expVal)^2)
var
stdDev <- var^.5
stdDev
8+8+10 +12 + 20 +20 + 20
vals <- 2:12
6:1
c(1:6, 5:1)
prob <- (1/36)*c(1:6, 5:1)
expVal <- sum(vals*prob)
expVal
ob
var <- sum(prob*(vals - expVal)^2)
var
sqrt(var)
expVal <- sum(vals*prob)
vals <- c(-2,0,2)
prob <- c(.25, .5, .25)
expVal <- sum(vals*prob)
expVal
var <- sum(prob*(vals - expVal)^2)
var
valX <- c(-1, 1)
probX <- c(.5,.5)
expValX <- sum(valX*probX)
expValX <- sum(valX*probX)
varX <- sum(probX*(valsX - expValX)^2)
varX <- sum(probX*(valX - expValX)^2)
varY <- sum(probY*(valsY - expValY)^2)
#X + X
valsY <- c(-2,0,2)
probY <- c(.25, .5, .25)
expValY <- sum(valsY*probY)
expValY
varY <- sum(probY*(valsY - expValY)^2)
var
varY
varX
valZ <- 2*valX
probZ <- probX
expValZ <- sum(valZ*probZ)
varX <- sum(probZ*(valZ - expValZ)^2)
varZ <- sum(probZ*(valZ - expValZ)^2)
varZ
valX <- c(-1, 1)
probX <- c(.5,.5)
expValX <- sum(valX*probX)
varX <- sum(probX*(valX - expValX)^2)
#X + X
valsY <- c(-2,0,2)
probY <- c(.25, .5, .25)
expValY <- sum(valsY*probY)
expValY
varY <- sum(probY*(valsY - expValY)^2)
var
varY
df <- tibble( rv = c("x", "y", "z"),
exVal = c(expValX, expValY, expValZ),
var = c(varX, varY, varZ))
df
valX <- 1:6
probX <- rep(1/6, 6)
valY <- 1:20
probY <- rep(1/20, 20)
expValX <- sum(valX*probX)
expValY <- sum(valY*probY)
expValX
expValY
varX
varX <- sum( probX*(valX - expValX)^2)
varY <- sum( probY*(valY - expValY)^2)
varX
varY
varX + varY
sqrt(varX + varY)
750^2 + 1000^2
sqrt(1562500)
x3 <- -2
prod(1:5)
13:10
52:49
x1 <- 40 - 2
x2 <- 10 - 2
x3 <- -2
p1
x1 <- 40 - 2
x2 <- 10 - 2
x3 <- -2
p1 <- prod(13:10) / prod(52:49)
p2 <- prod(26:23) / prod(52:49)
p3 <- 1 - p1 - p2
p1
p2
p3
vals <- c(x1,x2,x3)
probs <- c(p1, p2, p3)
expVal <- sum(vals*probs)
expVal
var <- sum(probs*(vals - expVal)^2)
var
sqrt(var)
probs <- round(c(p1, p2, p3), 3)
expVal <- sum(vals*probs)
expVal
var <- sum(probs*(vals - expVal)^2)
var
sqrt(var)
pnorm(0, mean = 0, sd = 1)
pnorm(1, mean = 0, sd = 1)
qnorm(.75, mean = 0, sd = 1)
pnorm(qnorm(.75, mean = 0, sd = 1))
pnorm(1800, mean = 1500, sd = 300)
qnorm(.99, mean = 1500, sd = 300)
pnorm(30, mean = 24, sd = 2)
1 - pnorm(30, mean = 24, sd = 2)
pnorm(30, mean = 24, sd = 2, lower.tail = FALSE)
pnorm(23, mean = 24, sd = 2)
pnorm(25, mean = 24, sd = 2, lower.tail = FALSE)
pnorm(23, mean = 24, sd = 2)*2
pnorm(23, mean = 24, sd = 2) + pnorm(25, mean = 24, sd = 2, lower.tail = F)
pnorm(26, mean = 24, sd = 2) - pnorm(21, mean = 24, sd = 2)
pnorm(35.8, mean = 36, sd = .11)
2*pnorm(35.8, mean = 36, sd = .11)
qnorm(.03, mean = 98.2, sd = .73)
pnorm(96.82702, mean = 98.2, sd = .73)
qnorm(.1, mean 98.2, sd = .73, lower.tail = F)
qnorm(.1, mean= 98.2, sd = .73, lower.tail = F)
qnorm(.9, mean= 98.2, sd = .73)
getwd()
setwd("./Documents/ckaterba.github.io")
ls()
getwd
getwd()
list.files()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(googleway)
library(jsonlite)
library(leaflet)
#load app_name, app_client_id, and app_secret from a private file
source("secret.R", local = knitr::knit_global())
#define strava app
app <- oauth_app( app_name, app_client_id, app_secret)
endpoint <- oauth_endpoint(
request = NULL,
authorize = "https://www.strava.com/oauth/authorize",
access = "https://www.strava.com/oauth/token"
)
token <- oauth2.0_token(endpoint, app, as_header = FALSE,
scope = "activity:read_all")
#pulling all activity data from Strava's API
df_list <- list()
i <- 1
done <- FALSE
while (!done) {
req <- GET(
url = "https://www.strava.com/api/v3/athlete/activities",
config = token,
query = list(per_page = 200, page = i)
)
df_list[[i]] <- fromJSON(content(req, as = "text"), flatten = TRUE)
if (length(content(req)) < 200) {
done <- TRUE
} else {
i <- i + 1
}
}
# compine into one data frame
df <- rbind_pages(df_list)
# filter all winter sports
ski <- df %>%
filter(str_detect(type, "Ski|Snow")) %>%
select(upload_id, type, map.summary_polyline) %>%
na.omit()
view(ski)
# filter all winter sports
ski <- df %>%
filter(str_detect(type, "Ski|Snow")) %>%
select(upload_id, type, map.summary_polyline) %>%
na.omit() %>%
filter(map.summary_polyline != '')
view(ski)
#on map, yellow will be alpine, blue backcountry, green nordic, red snowboard
winterSports <- sort(unique(ski$type))
winterSports
colors = c("yellow", "blue", "green", "red")
#create basemap
map <- leaflet() %>%
addProviderTiles(providers$Stamen.Terrain) %>%
fitBounds(lng1 = -114.6, lng2 = -113.3,
lat1 = 48.1, lat2 = 48.6, )
index <- unique(ski$upload_id)
# loop through all activities, creating a polygonal line for each colored appropriately
for(i in index){
activity <- ski %>% filter(upload_id == i)
coords <- googleway::decode_pl(activity$map.summary_polyline)
map <- addPolylines(map, lng = coords$lon, lat = coords$lat,
color = colors[which(activity$type == winterSports)],
opacity = 1/4, weight = 2)
}
#finally, add a legend to the map and show the product
map  %>% addLegend(position= "bottomright", colors = colors, labels = winterSports)
winterSports
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain) %>%
fitBounds(lng1 = -114.6, lng2 = -113.3,
lat1 = 48.1, lat2 = 48.6, )
#finally, add a legend to the map and show the product
map  %>% addLegend(position= "bottomright", colors = colors, labels = winterSports)
providers
#create basemap
map <- leaflet() %>%
addProviderTiles(providers$Stadia.StamenTerrain) %>%
fitBounds(lng1 = -114.6, lng2 = -113.3,
lat1 = 48.1, lat2 = 48.6, )
index <- unique(ski$upload_id)
# loop through all activities, creating a polygonal line for each colored appropriately
for(i in index){
activity <- ski %>% filter(upload_id == i)
coords <- googleway::decode_pl(activity$map.summary_polyline)
map <- addPolylines(map, lng = coords$lon, lat = coords$lat,
color = colors[which(activity$type == winterSports)],
opacity = 1/4, weight = 2)
}
#finally, add a legend to the map and show the product
map  %>% addLegend(position= "bottomright", colors = colors, labels = winterSports)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set('../docs')
library(tidyverse)
library(httr)
library(googleway)
library(jsonlite)
library(leaflet)
#on map, yellow will be alpine, blue backcountry, green nordic, red snowboard
winterSports <- sort(unique(ski$type))
winterSports
colors = c("yellow", "blue", "green", "red")
#create basemap
map <- leaflet() %>%
addProviderTiles(providers$Thunderforest.Outdoors) %>%
fitBounds(lng1 = -114.6, lng2 = -113.3,
lat1 = 48.1, lat2 = 48.6, )
index <- unique(ski$upload_id)
# loop through all activities, creating a polygonal line for each colored appropriately
for(i in index){
activity <- ski %>% filter(upload_id == i)
coords <- googleway::decode_pl(activity$map.summary_polyline)
map <- addPolylines(map, lng = coords$lon, lat = coords$lat,
color = colors[which(activity$type == winterSports)],
opacity = 1/4, weight = 2)
}
#finally, add a legend to the map and show the product
map  %>% addLegend(position= "bottomright", colors = colors, labels = winterSports)
#on map, yellow will be alpine, blue backcountry, green nordic, red snowboard
winterSports <- sort(unique(ski$type))
winterSports
colors = c("yellow", "blue", "green", "red")
#create basemap
map <- leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
fitBounds(lng1 = -114.6, lng2 = -113.3,
lat1 = 48.1, lat2 = 48.6, )
index <- unique(ski$upload_id)
# loop through all activities, creating a polygonal line for each colored appropriately
for(i in index){
activity <- ski %>% filter(upload_id == i)
coords <- googleway::decode_pl(activity$map.summary_polyline)
map <- addPolylines(map, lng = coords$lon, lat = coords$lat,
color = colors[which(activity$type == winterSports)],
opacity = 1/4, weight = 2)
}
#finally, add a legend to the map and show the product
map  %>% addLegend(position= "bottomright", colors = colors, labels = winterSports)
install.packages('animation')
library(animation)
getwd()
im.convert('assets/4_2_pi4_2.pdf', output='ug_research.png', extra.opts="-density 450")
im.convert('assets/4_2_pi4_2.pdf', output='assets/ug_research.png', extra.opts="-density 450")
im.convert('model.pdf', output='assets/model.png', extra.opts="-density 450")
checking <- c(20.88, 15.99,14.99, 57.89,
40.71, 29.52,19.84,24.80)
savings <- c(28.82,34.28,70.95,178.71, 33.20)
sum(checking)
sum(savings)
sum(checking, savings)
sum(checking, savings)
checking <- c(20.88, 15.99,14.99, 57.89,
40.71, 29.52,19.84,24.80)
savings <- c(28.82,34.28,70.95,178.71, 33.20, 100)
sum(checking, savings)
sum(savings)
sum(checking)
sum(checking, 140)
sum(checking, savings)
sum(savings)
checking <- c(20.88, 15.99,14.99, 57.89,
40.71, 29.52, 70.95, 19.84,24.80)
savings <- c(28.82,34.28,178.71, 33.20, 100)
sum(savings)
checking <- c(20.88, 15.99,14.99, 57.89,
40.71, 29.52, 70.95, 19.84,24.80, 138.75)
sum(checking)
670.59 + 138.75
