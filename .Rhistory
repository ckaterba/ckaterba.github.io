knitr::opts_chunk$set(echo = TRUE)
source("seed.R", local = knitr::knit_global())
rnorm(1)
knitr::opts_chunk$set(echo = TRUE)
source("seed.R", local = knitr::knit_global())
rnorm(1)
getwd
getwd()
library(tidyverse)
library(knitr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
source("../seed.R", local = knitr::knit_global())
source('E:/My Drive/STAT216/Rexams/knitExams.R')
exams[1]
exams[2]
source('E:/My Drive/STAT216/Rexams/knitExams.R')
source('E:/My Drive/STAT216/Rexams/knitExams.R')
exams
?render
rmarkdown::render(exams[1], output_format = "all")
rmarkdown::render(exams[1], output_format = "html")
rmarkdown::render(exams[1], output_format = c("pdf_document",
"html_document", "word_document"))
source('E:/My Drive/STAT216/Rexams/knitExams.R')
keys
source('E:/My Drive/STAT216/Rexams/knitExams.R')
library(tidyverse)
library(knitr)
source("../seed.R", local = knitr::knit_global())
# each column is for a problem, broken down by parts
# figure out how to auto NA for non-rectuangular.
points <- tibble(
p1 = c(3,3,4,3,3,0),
p2 = c(6,3,0,0,0,0),
p3 = c(1,2,3,4,0,0),
p4 = c(4,4,2,0,0,0),
p5 = c(3,4,4,3,3,0),
p6 = c(4,3,6,3,0,0),
p7 = c(3,2,4,4,0,0),
)
numQs = dim(points)[2]
totalPoints = sum(points)
totalPoints
rmarkdown::render(exam, output_format = c("pdf_document",
"html_document", "word_document"))
rmarkdown::render(key, output_format = c("pdf_document",
"html_document", "word_document"))
source('E:/My Drive/STAT216/Rexams/knitExams.R')
source('E:/My Drive/STAT216/Rexams/knitExams.R')
65/81
prop.test(c(624*.276, 366*.35), c(264, 276), conf.level = .91, correct = FALSE)
13+9+2+1+3+2+5+4
86-39
1+2+2+1+3+2+1+2+1+1+1+3+1+2+2
86-25
16+13+2+1+4+1+1+1+1+3+3+2
86-48
qnorm((1-.91)/2, lower.tail = F)
qnorm(.035)
qt(.035, df = 14)
.276-.35
z <- qnorm((1-.91)/2, lower.tail = F)
z
sqrt( .276*(1 - .276)/264 + .35*(1 - .35)/264 )
77/86
294.50+100+256.20
source("/Volumes/GoogleDrive/My Drive/STAT216/Rexams/knitExams.R")
Pnorm(.5)
x <- rnorm(10)
y <- c( rnorm(10), 10)
model <- lm(y ~ x)
x
y
library(openintro)
library(tidyverse)
view(gss2010)
?gss2010
gss2010
head(gss2010)
summary(gss2010)
mean(gss2010$hrsrelax)
mean(gss2010$hrsrelax, na.rm = TRUE)
?table
gss2010 %>% group_by(degree, grass) %>% summarise(grassCount = n())
gss2010 %>% group_by(degree) %>% summarise(degCount = n())
119/375
73 / 218
carData::Adler
1.5*16000 + 8000
16000/28
1.3e6 / 1.5
2.3e6 / 1.5
(27787.5 - 14487.5)/(545 - 265)
14487.5 - 265*47.5
3 * 50
4 * 50
library(openintro)
2 + 3
qplot(x = rnorm(10), y = rnorm(10))
library(tidyverse)
library(openintro)
qplot( x = 1:10, y = rnorm(10))
qplot( x = 1:2, y = rnorm(10))
data("fish_encounters")
data(cars93)
require(cars93)
force(cars93)
x <- 1:10
4000*(1.1)^12
4000 + 400*12
1000*.015
1000*(1 + .015/12)^(12*1)
(1015.104-1000)/1000
(1.1)^12 - 1
5000(1 + .15/12)^12
5000*(1 + .15/12)^12
5000*(1 + .15/12)^(12*5)
library(openintro)
library(tidyverse)
library(openintro)
arbuthnot$girls
view(arbuthnot)
?arbutnot
?arbuthnot
mean(arbuthnot$girls)
mean(arbuthnot$girls)
mean(arbuthnot$boys)
data <- sample(1:100, 1000, replace = TRUE)
set.seed(1123)
data <- sample(1:100, 1000, replace = TRUE)
mean(data)
set.seed(1123)
data <- sample(1:100, 1000, replace = TRUE)
#
mean(data)
1:100
set.seed(1123)
data <- sample(1:100, 1000, replace = TRUE)
#
mean(data)
mean(1:100)
plot(data)
dotPlot(data)
hist(data)
?hist
hist(data, plot = TRUE )
#hist(data, plot = TRUE )
ggplot(aes(x = data)) + geom_hist()
hist(data, plot = TRUE )
data2 <- rnorm(100, mean = 5, sd = 2)
data1 <- rep(5, 100)
data2 <- rnorm(100, mean = 5, sd = 2)
data1
mean(data1)
hist(data2, plot = T)
mean(data2)
hist(data1, plot = T)
sum((data1 - mean(data1))^2) / (length(data1) - 1)
sum((data2 - mean(data2))^2) / (length(data2) - 1)
sum((data2 - mean(data2))^2) / (length(data2) - 1)
var(data1)
var(data2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
women <- function(n){
#n is number of women
#output is vector of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
men <- function(n){
#n is number of men
#output is vector of 0/1's of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
women(1)
women(1)
women(1)
women(1)
women(1)
women(1)
women(24)
24
men(24)
sample_diff <- function(n){
#random sample of n women and n men, returns difference in promotion prop
m <- men(n)
f <- women(n)
diff <- mean(m) - mean(f)
return(diff)
}
men(10)
foo <- men(10)
foo
mean(foo)
mean(women(25))
mean(women(25))
mean(women(25))
mean(women(25))
sample_diff <- function(n){
#random sample of n women and n men, returns difference in promotion prop
m <- men(n)
f <- women(n)
diff <- mean(m) - mean(f)
return(diff)
}
sample_diff(24)
sample_diff(24)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(100)
sample_diff(24)
sample_diff(24)
sample_diff(24)
sample_diff(24)
sample_diff(24)
simulateData <- function(n, m){
# n: sample size
# m: number of times to run the experiment, ie # of trials
results <- c()
for(i in 1:m){
results <- append(results, sample_diff(n))
}
return(results)
}
data <- simulateData(1, 1)
data
data1 <- simulateData(24, 10)
data1
mean(data1)
data1 <- simulateData(24, 10000)
mean(data1)
hist(data1, plot = T)
hist(data1)
favorable <- data1 >= .292
favorable <- (data1 >= .292)
5 > 2
c(1, 5) > 2
mean(favorable)
sum(favorable)
sum(favorable) / 10000
data2 <- simulateData(100, 10000)
mean(data2)
hist(data2)
sum(favorable2) / 10000
favorable2 <- (data2 >= .292)
sum(favorable2) / 10000
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
women <- function(n){
#n is number of women
#output is vector of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
men <- function(n){
#n is number of men
#output is vector of 0/1's of length n, 0 = no promotion, 1 = promotion
return( rbinom(n, 1, .5))
}
sample_diff <- function(n){
#random sample of n women and n men, returns difference in promotion prop
m <- men(n)
f <- women(n)
diff <- mean(m) - mean(f)
return(diff)
}
sample_diff(30)
simulateData <- function(n, m){
# n: sample size
# m: number of times to run the experiment, ie # of trials
results <- c()
for(i in 1:m){
results <- append(results, sample_diff(n))
}
return(results)
}
data <- simulateData(1, 1)
data
data1 <- simulateData(24, 10)
data1
mean(data1)
data1 <- simulateData(24, 10000)
mean(data1)
hist(data1)
favorable <- (data1 >= .292)
sum(favorable) / 10000
data2 <- simulateData(100, 10000)
mean(data2)
hist(data2)
favorable2 <- (data2 >= .292)
sum(favorable2) / 10000
mean(data1)
mean(data2)
hist(data1, breaks = 24)
hist(data2, breaks = 24)
dataLogical <- data >= .292
head(dataLogical)
pval <- sum(dataLogical) / length(dataLogical)
pval
dataLogical <- data1 >= .292
head(dataLogical)
pval <- sum(dataLogical) / length(dataLogical)
pval
114 + 118 - 78
36 + 78 + 40
51 + 114 + 47 + 118
1 - (1 - .255)^5
1 - .2^3
.8^3
10/24
18/24
20/24
52*51
choose(52,2)
library(tidyverse)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35))
probDist
probDist$vals
probDist$probs
probDist$vals*probDist$probs
sum(probDist$vals*probDist$probs)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probs = (1/52)*c(12,4,1,35))
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probDist
sum(probDist$prod)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs) %>%
summarize( expVal = sum(prod))
probDist
expVal <- sum(probDist)
expVal
probDist <- probDist %>%
mutate( sqDevFromMean = (vals - expVal)^2)
probDist <- tibble( vals = c(1,5,10, 0 ),
probs = (1/52)*c(12,4,1,35)) %>%
mutate( prod = vals*probs)
probDist <- probDist %>%
mutate( sqDevFromMean = (vals - expVal)^2)
probDist
probDist <- probDist %>%
mutate( sqDevFromMeanWeighted = prob*(vals - expVal)^2)
probDist <- probDist %>%
mutate( sqDevFromMeanWeighted = probs*(vals - expVal)^2)
probDist
variance <- sum(probDist$sqDevFromMeanWeighted)
variance
stdDev <- sqrt(variance)
stdDev
expVal <- sum(vals*probs)
vals <- c(1, -1)
probs <- c(18/38, 20/38)
expVal <- sum(vals*probs)
expVal
18/38
var <- sum( probs*(vals - expVal)^2)
var
stdDev <- var^.5
stdDev
expVal
(expVal + 36/38)*(38/2)
expVal <- sum(vals*probs)
expVal
vals <- c(-1, 17)
probs <- c(36/38, 2/38)
expVal <- sum(vals*probs)
expVal
var <- sum( probs*(vals - expVal)^2)
var
stdDev <- var^.5
stdDev
8+8+10 +12 + 20 +20 + 20
vals <- 2:12
6:1
c(1:6, 5:1)
prob <- (1/36)*c(1:6, 5:1)
expVal <- sum(vals*prob)
expVal
ob
var <- sum(prob*(vals - expVal)^2)
var
sqrt(var)
expVal <- sum(vals*prob)
vals <- c(-2,0,2)
prob <- c(.25, .5, .25)
expVal <- sum(vals*prob)
expVal
var <- sum(prob*(vals - expVal)^2)
var
valX <- c(-1, 1)
probX <- c(.5,.5)
expValX <- sum(valX*probX)
expValX <- sum(valX*probX)
varX <- sum(probX*(valsX - expValX)^2)
varX <- sum(probX*(valX - expValX)^2)
varY <- sum(probY*(valsY - expValY)^2)
#X + X
valsY <- c(-2,0,2)
probY <- c(.25, .5, .25)
expValY <- sum(valsY*probY)
expValY
varY <- sum(probY*(valsY - expValY)^2)
var
varY
varX
valZ <- 2*valX
probZ <- probX
expValZ <- sum(valZ*probZ)
varX <- sum(probZ*(valZ - expValZ)^2)
varZ <- sum(probZ*(valZ - expValZ)^2)
varZ
valX <- c(-1, 1)
probX <- c(.5,.5)
expValX <- sum(valX*probX)
varX <- sum(probX*(valX - expValX)^2)
#X + X
valsY <- c(-2,0,2)
probY <- c(.25, .5, .25)
expValY <- sum(valsY*probY)
expValY
varY <- sum(probY*(valsY - expValY)^2)
var
varY
df <- tibble( rv = c("x", "y", "z"),
exVal = c(expValX, expValY, expValZ),
var = c(varX, varY, varZ))
df
valX <- 1:6
probX <- rep(1/6, 6)
valY <- 1:20
probY <- rep(1/20, 20)
expValX <- sum(valX*probX)
expValY <- sum(valY*probY)
expValX
expValY
varX
varX <- sum( probX*(valX - expValX)^2)
varY <- sum( probY*(valY - expValY)^2)
varX
varY
varX + varY
sqrt(varX + varY)
750^2 + 1000^2
sqrt(1562500)
x3 <- -2
prod(1:5)
13:10
52:49
x1 <- 40 - 2
x2 <- 10 - 2
x3 <- -2
p1
x1 <- 40 - 2
x2 <- 10 - 2
x3 <- -2
p1 <- prod(13:10) / prod(52:49)
p2 <- prod(26:23) / prod(52:49)
p3 <- 1 - p1 - p2
p1
p2
p3
vals <- c(x1,x2,x3)
probs <- c(p1, p2, p3)
expVal <- sum(vals*probs)
expVal
var <- sum(probs*(vals - expVal)^2)
var
sqrt(var)
probs <- round(c(p1, p2, p3), 3)
expVal <- sum(vals*probs)
expVal
var <- sum(probs*(vals - expVal)^2)
var
sqrt(var)
pnorm(0, mean = 0, sd = 1)
pnorm(1, mean = 0, sd = 1)
qnorm(.75, mean = 0, sd = 1)
pnorm(qnorm(.75, mean = 0, sd = 1))
pnorm(1800, mean = 1500, sd = 300)
qnorm(.99, mean = 1500, sd = 300)
pnorm(30, mean = 24, sd = 2)
1 - pnorm(30, mean = 24, sd = 2)
pnorm(30, mean = 24, sd = 2, lower.tail = FALSE)
pnorm(23, mean = 24, sd = 2)
pnorm(25, mean = 24, sd = 2, lower.tail = FALSE)
pnorm(23, mean = 24, sd = 2)*2
pnorm(23, mean = 24, sd = 2) + pnorm(25, mean = 24, sd = 2, lower.tail = F)
pnorm(26, mean = 24, sd = 2) - pnorm(21, mean = 24, sd = 2)
pnorm(35.8, mean = 36, sd = .11)
2*pnorm(35.8, mean = 36, sd = .11)
qnorm(.03, mean = 98.2, sd = .73)
pnorm(96.82702, mean = 98.2, sd = .73)
qnorm(.1, mean 98.2, sd = .73, lower.tail = F)
qnorm(.1, mean= 98.2, sd = .73, lower.tail = F)
qnorm(.9, mean= 98.2, sd = .73)
getwd()
setwd("./Documents/ckaterba.github.io")
ls()
getwd
getwd()
list.files()
